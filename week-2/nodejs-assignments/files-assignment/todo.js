/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const app = express();
const fs = require("fs");
const port = 3000;
let items = 0;
let finalData;

const obj = {
  title: "Leave Request10",
  completed: false,
  description: "Get approval for the leave request",
};
app.use(express.json());

app.get("/todos", (req, res) => {
  fs.readFile("./files/file2.txt", "utf-8", (err, data) => {
    if (err) console.log(err);
    else {
      // console.log(data);
      // console.log(typeof data);
      // let newData = JSON.parse(data);
      // console.log(typeof newData);
      // finalData = [...newData, obj];
      // console.log(finalData);
      if (data) res.status(200).send(JSON.parse(data));
      else res.status(404).send("File is empty");
    }
  });
});

app.get("/todos/:id", (req, res) => {
  let id = parseInt(req.params.id, 10);
  fs.readFile("./files/file2.txt", "utf-8", (err, data) => {
    if (err) console.log(err);
    else {
      // console.log(data);
      // console.log(typeof data);
      // let newData = JSON.parse(data);
      // console.log(typeof newData);
      // finalData = [...newData, obj];
      // console.log(finalData);
      if (data) {
        let obj = JSON.parse(data);
        let result = obj.filter((item) => item.id === id);

        res.status(200).send(result);
      } else res.status(404).send("File is empty");
    }
  });
});

app.put("/todos/:id", (req, res) => {
  let id = parseInt(req.params.id, 10);
  fs.readFile("./files/file2.txt", "utf-8", (err, data) => {
    if (err) console.log(err);
    else {
      if (data) {
        let obj = JSON.parse(data);
        for (let i = 0; i < obj.length; i++) {
          if (obj[i].id === id) {
            obj[i].completed = true;
          }
        }
        fs.writeFile(
          "./files/file2.txt",
          JSON.stringify(obj),
          "utf-8",
          (err) => {
            if (err) console.log(err);
            else res.status(200).send("Updated successfully");
          }
        );
      } else res.status(404).send("File is empty");
    }
  });
});

app.delete("/todos/:id", (req, res) => {
  let id = parseInt(req.params.id, 10);
  fs.readFile("./files/file2.txt", "utf-8", (err, data) => {
    if (data) {
      let obj = JSON.parse(data);
      let newObj = obj.filter((item) => item.id != id);
      fs.writeFile(
        "./files/file2.txt",
        JSON.stringify(newObj),
        "utf-8",
        (err) => {
          if (err) console.log(err);
          else {
            res.status(200).send("Deleted the item successfully");
          }
        }
      );
    }
  });
});

app.post("/todos", (req, res) => {
  let body = req.body;
  body = { ...body, id: items++ };
  // console.log(typeof body);

  fs.readFile("./files/file2.txt", "utf-8", (err, data) => {
    if (data) {
      let existData = JSON.parse(data);
      finalData = [...existData, body];
      // console.log("New Data " + JSON.stringify(finalData));
      // console.log("Existing Data :" + JSON.stringify(existData));
    } else {
      finalData = [body];
    }
    // console.log("Final Data :" + JSON.stringify(finalData));
    fs.writeFile("./files/file2.txt", JSON.stringify(finalData), (err) => {
      if (err) res.status(500).send("Unable to write into the file");
      else res.status(201).send("Written successfully");
    });
  });
});

app.listen(port, () => {
  console.log(`Server is up and running at port ${port}`);
});
